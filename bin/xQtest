#!/usr/bin/env bash
source .env
IPAddress=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER)
URL="http://${IPAddress}:8080/exist/rest/db"
SRC="unit-tests/t-${NAME}.xqm"
FIXTURES='unit-tests/fixtures'

BASENAME=$(basename $SRC)
nsname=http://${NS_DOMAIN}/#${NAME}


# copy the test file into container
docker cp $SRC ${CONTAINER}:/tmp

# generic post function
function post() {
curl  -s \
  -H 'Content-Type: application/xml' \
  -u 'admin:' \
  --write-out  '\nstatus: %{http_code}\n' \
  --output 'tmp/body.txt' \
  --dump-header 'tmp/headers.txt' \
  --data-binary @- "$URL"
}

cat <<EOF | post >tmp/test.log
<query xmlns='http://exist.sourceforge.net/NS/exist' start='1' max='99' wrap='no'>
<text><![CDATA[
xquery version '3.1';
import module namespace inspect = "http://exist-db.org/xquery/inspection";
import module namespace test="http://exist-db.org/xquery/xqsuite" at "resource:org/exist/xquery/lib/xqsuite/xqsuite.xql";
try {
  let \$nl := "&#10;"
  let \$space := '&#32;'
  let \$indent := \$space || \$space
  let \$HASH := \$nl || '#' || \$space
  let \$SUCCESS := \$nl || 'ok' || \$space
  let \$FAILURE := \$nl || 'not ok' || \$space
  let \$YAMLStartEnd := \$nl || '---'
  let \$YAMLblock := \$nl || \$indent || \$indent 
  let \$file := '/tmp/${BASENAME}'
  let \$resource := '${BASENAME}'
  let \$collection := 'xmldb:exist://' || request:get-path-info() || '/unit-tests'
  let \$colAvailable := 
       if (xmldb:collection-available(\$collection)) 
       then () 
       else (xmldb:create-collection(request:get-path-info(),'unit-tests')) 
  let \$route := \$collection  || '/' || \$resource
  let \$mimeType :=  'application/xquery'
  let \$contents := file:read(\$file)
  let \$perm := 'rwxr-xr-x'
  let \$store :=
     xmldb:store(\$collection, \$resource, \$contents, \$mimeType) 
     => xs:anyURI() 
     => sm:chmod(\$perm)
  let \$ts := test:suite(xs:anyURI(\$route) => inspect:module-functions())
  let \$success := function(\$map){
  (\$SUCCESS,\$map('counter'),\$map('class'),'-',\$map('name') ) => string-join(' ') 
}
 let \$failure := function(\$map){( 
 \$FAILURE, \$map('counter'), \$space, \$map('class'),'-',\$map('name'),
 \$YAMLStartEnd,
 \$nl,\$indent, ' message: ' || \$map('message'),
 \$nl,\$indent, 'expected: ' || \$map('expected'),
 \$nl,\$indent, '     got: ' || \$map('got'),
 \$YAMLStartEnd
 )}
 let \$error := function(\$map){
 \$FAILURE, \$map('counter'), \$space, \$map('class'),'-',\$map('name'),
 \$YAMLStartEnd,
 \$nl,\$indent, 'error type: ' || \$map('type'),
 \$nl,\$indent, 'message: | ' || 
 \$map('message') => 
 normalize-space() =>
 concat(' ') =>
 replace('(.{0,60})',\$YAMLblock || '\$1' ) ,
\$YAMLStartEnd
(:
replace(concat(normalize-space(\$map('message')),' '),'(.{0,60})',\$YAMLblock || '\$1' )
:)
}
  return (
  'TAP version 13' || \$nl,
  '1..' || \$ts/testsuite[1]/@tests/string(),
   for \$node at \$i in  \$ts//testcase
     let \$map := map {
     'counter': string(\$i),
     'name': \$node/@name/string(),
     'class': \$node/@class/string() => normalize-space()
   }
   return (
       if( \$node/failure[@message]  ) then( 
       \$failure( map:merge((
         \$map,
         map {
          'message' : \$node/failure/@message/string(),
         'expected' : \$node/failure//string(),
              'got' : \$node/output/string()
        }
       ))))
       else if( \$node/error[@message]  )then(
         \$error( map:merge((
         \$map,
         map {
          'type' : \$node/error/@type/string(),
          'message' : \$node/error/@message/string()
        }
         ))))
       else( \$success(\$map))
  ), 
  (:
  \$nl,
  \$ts,
:)
  \$nl

)} catch * {
      'Error:${SRC}:' || \$err:code || ': '  || \$err:description || '&#10;'
}
]]></text>
</query>
EOF



echo "$(<tmp/body.txt)"
# echo "$(<tmp/headers.txt)"
grep -oP '^err' body.txt &>/dev/null && exit 2
grep -q '400 Bad Request' headers.txt &>/dev/null && exit 2

rm -r tmp/*.txt

