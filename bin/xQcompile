#!/usr/bin/env bash
source .env
TYPE=$1
if [ -z "${TYPE}" ] ; then
  FILE_NAME=${NAME}
  SRC="content/${NAME}.xqm"
else
  FILE_NAME=t-${NAME}
  SRC="unit-tests/t-${NAME}.xqm"
fi

docker cp ${SRC} ${CONTAINER}:/tmp

IPAddress=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER)
URL="http://${IPAddress}:${PORT}/exist/rest/db"

function post() {
curl  -s \
  -H 'Content-Type: application/xml' \
  -u 'admin:' \
  --write-out  '\nstatus: %{http_code}\n' \
  --output 'tmp/body.txt' \
  --dump-header 'tmp/headers.txt' \
  --data-binary @- "$URL"
}

cat <<EOF | post > tmp/compile.log
<query xmlns='http://exist.sourceforge.net/NS/exist' start='1' max='99' wrap='no'>
<text><![CDATA[
xquery version '3.1';
try {
  let \$nl := "&#10;"
  let \$file := '/tmp/${FILE_NAME}.xqm'
  let \$moduleLoadPath := 'xmldb:exist://' || request:get-path-info()
  let \$compiled :=  file:read(\$file) => util:compile-query(\$moduleLoadPath)
  return (
  if ( \$compiled/@result/string() eq 'fail'  ) then (
      ( 
      'Error', 
      '${SRC}',
      \$compiled/error/@line,
      \$compiled/error/@column,
      ' '  || \$compiled/error/text()
      ) => string-join(':')
      ) else (
      ('INFO','${SRC}', ' compile OK!' ) => string-join(':')
    )
)} catch * {
      'Error:${SRC}:' || \$err:code || ': '  || \$err:description || '&#10;'
}
]]></text>
</query>
EOF
# TODO add check on status .txt body and headers
# echo '========================================='
if [ ! -s tmp/body.txt ] ; then
  echo "Error:${SRC}:1:1: no curl reponse "
fi

Errors=$(grep -oP '^Error:(.+)$' tmp/body.txt )
if [ -n "${Errors}" ] ; then
  rm -f tmp/{body.txt,headers.txt}
  (>&2 echo "${Errors}")
  exit 2
else
 echo "$(<tmp/body.txt)"
 rm -f tmp/{body.txt,headers.txt}
 exit 0
fi

echo "$(<tmp/body.txt)"
# echo '========================================='
echo "$(<tmp/headers.txt)"
# echo '========================================='
rm -f tmp/{body.txt,headers.txt}
